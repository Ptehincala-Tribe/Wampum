{
  "0x": "no response or bad input",
  "buy": {
    "0": "market doesn't exist",
    "-1": "amount/price bad",
    "-2": "oracle-only branch",
    "-4": "not enough money",
    "-5": "bid price exceeds best ask",
    "21": "trade already exists"
  },
  "buyCompleteSets": {
    "0": "market not found",
    "-1": "oracle-only branch",
    "-3": "not enough cash"
  },
  "cashFaucet": {
    "-1": "Hey, you're not broke!"
  },
  "claimProceeds": {
    "0": "reporting not done",
    "-1": "trader doesn't exist",
    "-8": "invalid branch"
  },
  "closeMarket": {
    "0": "fail/trading not over yet/event not expired or closed already",
    "-1": "Market has no cash anyway / already closed",
    "-2": "0 outcome / not reported on yet",
    "-3": "not final round 2 event",
    "-5": "Event forked and not final yet",
    "-6": "bonded pushed forward market not ready to be resolved",
    "-7": "event not reportable >.99",
    "-8": "market isn't in branch"
  },
  "collectFees": {
    "-1": "rep redistribution/rewards/penalizations in consensus not done yet"
  },
  "createEvent": {
    "-1": "we're either already past that date, branch doesn't exist, or description is bad",
    "0": "not enough money to pay fees or event already exists",
    "-2": "max value < min value",
    "-9": "would expire during non-reporting fork period"
  },
  "createSingleEventMarket": {
    "0": "not enough money to pay fees or event already exists",
    "-1": "we're either already past that date, branch doesn't exist, or description is bad, or bad input or parent doesn't exist",
    "-2": "max value < min value",
    "-3": "too many outcomes",
    "-4": "not enough money",
    "-5": "fee too low",
    "-6": "duplicate events",
    "-7": "event already expired",
    "-8": "market already exists",
    "-9": "would expire during non-reporting fork period"
  },
  "createMarket": {
    "-1": "bad input or parent doesn't exist",
    "-2": "too many events",
    "-3": "too many outcomes",
    "-4": "not enough money",
    "-5": "fee too low",
    "-6": "duplicate events",
    "-7": "event already expired",
    "-8": "market already exists",
    "-9": "would expire during non-reporting fork period"
  },
  "createSubbranch": {
    "-1": "bad input or parent doesn't exist",
    "-2": "no money for creation fee or branch already exists"
  },
  "penalizationCatchup": {
    "-1": "not in first half of reporting period",
    "-2": "doesn't need to be penalized/caught up",
    "-3": "user isn't behind or reported in the last period (and should thus use the penalization functions in consensus.se)"
  },
  "penalizeOnForkedEvent": {
    "-2": "already past first half of new period and needed to penalize before then",
    "-4": "fork event isn't resolved yet",
    "-5": "already done for all events in this period"
  },
  "penalizeRoundTwoWrong": {
    "0": "event is a fork event",
    "-1": "need to penalize in round 2 penalize function",
    "-2": "already past first half of new period and needed to penalize before then",
    "-4": "in fork period only thing that rbcr is done on is the round 2 event in the original branch via round 2 penalize",
    "-5": "already done for all events in this period",
    "-6": "forked events should be penalized using the fork penalization function"
  },
  "penalizeWrong": {
    "0": "event is a fork event",
    "-1": "need to penalize in round 2 penalize function",
    "-2": "already past first half of new period and needed to penalize before then",
    "-4": "in fork period only thing that rbcr is done on is the round 2 event in the original branch via round 2 penalize",
    "-6": "forked events should be penalized using the fork penalization function",
    "-7": "no outcome"
  },
  "proveReporterDidntReportEnough": {
    "-1": "already done",
    "-2": "not in right part of period"
  },
  "pushMarketForward": {
    "-1": "fork period cannot be the current or previous period",
    "-2": "market is already closed or pushed forward",
    "-3": "not enough cash to post early resolution bond",
    "-4": "early resolution already attempted or outcome already exists"
  },
  "sell": {
    "0": "market doesn't exist",
    "-1": "amount/price bad",
    "-2": "oracle only branch",
    "-3": "bad outcome to trade",
    "-4": "not enough shares",
    "-5": "best bid exceeds ask price",
    "10": "insufficient balance",
    "21": "trade already exists"
  },
  "sellCompleteSets": {
    "-1": "oracle-only branch",
    "-2": "not a participant in this market",
    "-3": "not enough shares"
  },
  "sendReputation": {
    "-1": "Your reputation account was just created! Earn some reputation before you can send to others",
    "-2": "Receiving address doesn't exist"
  },
  "shortAsk": {
    "0": "market doesn't exist",
    "-1": "amount/price bad",
    "-2": "oracle only branch",
    "-3": "bad outcome to trade",
    "-4": "not enough shares",
    "-5": "best bid exceeds ask price",
    "10": "insufficient balance",
    "21": "trade already exists"
  },
  "short_sell": {
    "-1": "trade doesn't exist",
    "-2": "invalid trade hash/commitment",
    "-3": "must be a bid, not an ask",
    "-4": "market is already resolved",
    "-5": "can't pickup your own trade",
    "-6": "can't trade on oracle only branch",
    "-7": "not a large enough trade",
    "10": "insufficient balance",
    "22": "trade in same block prohibited"
  },
  "slashRep": {
    "0": "not a valid claim",
    "-2": "reporter doesn't exist"
  },
  "submitReportHash": {
    "-1": "invalid event",
    "-3": "not eligible to report on this event"
  },
  "submitReport": {
    "0": "reporter doesn't exist or has <1 rep",
    "-1": "has already reported",
    "-2": "not in second half of period [reveal part]",
    "-3": "hash doesn't match",
    "-4": "bad report",
    "-5": "invalid event",
    "-6": "already resolved",
    "-7": "<48 hr left in period, too late to report, able to put up readj. bonds though",
    "-8": "fees couldn't be collected",
    "-9": "need to pay not reporting bond"
  },
  "trade": {
    "-1": "oracle only branch",
    "-2": "bad trade hash",
    "-3": "trader doesn't exist / own shares in this market",
    "-4": "must trade at least 0.00000001 in value",
    "-5": "can't pick up your own trade",
    "10": "insufficient balance",
    "22": "trade in same block prohibited"
  },
  "updateTradingFee": {
    "-1": "invalid trading fee: either fee is below the minimum trading fee or you are trying to raise the trading fee (trading fees can be lowered, but not raised)",
    "-4": "sender's address does not match the market creator's address"
  },
  "GAS_LIMIT_EXCEEDED": {
    "error": 40,
    "message": "trade exceeds the current block gas limit"
  },
  "WRONG_NUMBER_OF_OUTCOMES": {
    "error": 41,
    "message": "the number of initial fair prices does not match this market's number of outcomes"
  },
  "INSUFFICIENT_LIQUIDITY": {
    "error": 42,
    "message": "insufficient liquidity to generate order book"
  },
  "INITIAL_PRICE_OUT_OF_BOUNDS": {
    "error": 43,
    "message": "one or more initial fair prices are out-of-bounds"
  },
  "PRICE_WIDTH_OUT_OF_BOUNDS": {
    "error": 44,
    "message": "price width is too large for one or more initial fair prices"
  },
  "DB_DELETE_FAILED": {
    "error": 97,
    "message": "database delete failed"
  },
  "DB_WRITE_FAILED": {
    "error": 98,
    "message": "database write failed"
  },
  "DB_READ_FAILED": {
    "error": 99,
    "message": "database read failed"
  },
  "INVALID_CONTRACT_PARAMETER": {
    "error": 400,
    "message": "cannot send object parameter to contract"
  },
  "NOT_LOGGED_IN": {
    "error": 401,
    "message": "not logged in"
  },
  "PARAMETER_NUMBER_ERROR": {
    "error": 402,
    "message": "wrong number of parameters"
  },
  "BAD_CREDENTIALS": {
    "error": 403,
    "message": "incorrect handle or password"
  },
  "TRANSACTION_NOT_FOUND": {
    "error": 404,
    "message": "transaction not found"
  },
  "PASSWORD_TOO_SHORT": {
    "error": 405,
    "message": "password must be at least 6 characters long"
  },
  "NULL_CALL_RETURN": {
    "error": 406,
    "message": "expected contract call to return value, received null"
  },
  "NULL_RESPONSE": {
    "error": 407,
    "message": "expected transaction hash from Ethereum node, received null"
  },
  "NO_RESPONSE": {
    "error": 408,
    "message": "no response"
  },
  "INVALID_RESPONSE": {
    "error": 409,
    "message": "could not parse response from Ethereum node"
  },
  "LOCAL_NODE_FAILURE": {
    "error": 410,
    "message": "RPC request to local Ethereum node failed"
  },
  "HOSTED_NODE_FAILURE": {
    "error": 411,
    "message": "RPC request to hosted nodes failed"
  },
  "TRANSACTION_INVALID": {
    "error": 412,
    "message": "transaction validation failed"
  },
  "TRANSACTION_RETRY_MAX_EXCEEDED": {
    "error": 413,
    "message": "maximum number of transaction retry attempts exceeded"
  },
  "HANDLE_TAKEN": {
    "error": 422,
    "message": "handle already taken"
  },
  "FILTER_NOT_CREATED": {
    "error": 450,
    "message": "filter could not be created"
  },
  "TRANSACTION_FAILED": {
    "error": 500,
    "message": "transaction failed"
  },
  "TRANSACTION_NOT_CONFIRMED": {
    "error": 501,
    "message": "polled network but could not confirm transaction"
  },
  "DUPLICATE_TRANSACTION": {
    "error": 502,
    "message": "duplicate transaction"
  },
  "RAW_TRANSACTION_ERROR": {
    "error": 503,
    "message": "error sending client-side transaction"
  },
  "RLP_ENCODING_ERROR": {
    "error": 504,
    "message": "RLP encoding error"
  },
  "TRANSACTION_RECEIPT_NOT_FOUND": {
    "error": 505,
    "message": "transaction receipt not found"
  },
  "RPC_TIMEOUT": {
    "error": 599,
    "message": "timed out while waiting for Ethereum network response"
  },
  "LOOPBACK_NOT_FOUND": {
    "error": 650,
    "message": "loopback interface required for synchronous local commands"
  },
  "ETHEREUM_NOT_FOUND": {
    "error": 651,
    "message": "no active ethereum node(s) found"
  },
  "CHECK_ORDER_BOOK_FAILED": {
    "error": 710,
    "message": "could not check order book using current prices"
  },
  "TRADE_FAILED": {
    "error": 711,
    "message": "trade failed, instead of success value (1), received "
  },
  "TRADE_NOT_FOUND": {
    "error": 712,
    "message": "trade not found"
  },
  "REPORT_NOT_FOUND": {
    "error": 812,
    "message": "report not found"
  }
}
